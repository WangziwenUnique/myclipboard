---
alwaysApply: true
---

# React 开发模式

## 组件结构
- 使用函数组件和现代 React Hooks
- 保持组件简洁，单一职责原则
- 使用 TypeScript 为组件 props 定义类型

## Hooks 使用
- 优先使用内置 Hooks（useState, useEffect, useCallback 等）
- 遵循 Hooks 的规则和最佳实践
- 自定义 Hooks 应该以 `use` 开头

## 状态管理
- 使用 `useState` 管理本地状态
- 对于复杂状态，考虑使用 `useReducer`
- 避免过度使用全局状态

## 性能优化
- 使用 `React.memo` 优化组件渲染
- 合理使用 `useCallback` 和 `useMemo`
- 避免在渲染函数中创建新对象或函数
# React 开发模式

## 组件结构
- 使用函数组件和现代 React Hooks
- 保持组件简洁，单一职责原则
- 使用 TypeScript 为组件 props 定义类型

## Hooks 使用
- 优先使用内置 Hooks（useState, useEffect, useCallback 等）
- 遵循 Hooks 的规则和最佳实践
- 自定义 Hooks 应该以 `use` 开头

## 状态管理
- 使用 `useState` 管理本地状态
- 对于复杂状态，考虑使用 `useReducer`
- 避免过度使用全局状态

## 性能优化
- 使用 `React.memo` 优化组件渲染
- 合理使用 `useCallback` 和 `useMemo`
- 避免在渲染函数中创建新对象或函数
