---
alwaysApply: true
---

# TypeScript 编码标准

## 类型安全
- 始终使用严格的 TypeScript 配置
- 避免使用 `any` 类型，优先使用具体的类型定义
- 利用 TypeScript 的严格模式特性

## React 组件
- 使用函数组件和 React Hooks
- 为 props 和 state 定义明确的类型接口
- 使用 `React.FC` 或明确的返回类型

## 导入导出
- 使用 ES6 模块语法
- 优先使用命名导入而不是默认导入
- 保持导入语句的整洁和有序

## 代码组织
- 将类型定义放在文件顶部
- 使用接口定义对象结构
- 利用 TypeScript 的联合类型和泛型
# TypeScript 编码标准

## 类型安全
- 始终使用严格的 TypeScript 配置
- 避免使用 `any` 类型，优先使用具体的类型定义
- 利用 TypeScript 的严格模式特性

## React 组件
- 使用函数组件和 React Hooks
- 为 props 和 state 定义明确的类型接口
- 使用 `React.FC` 或明确的返回类型

## 导入导出
- 使用 ES6 模块语法
- 优先使用命名导入而不是默认导入
- 保持导入语句的整洁和有序

## 代码组织
- 将类型定义放在文件顶部
- 使用接口定义对象结构
- 利用 TypeScript 的联合类型和泛型
